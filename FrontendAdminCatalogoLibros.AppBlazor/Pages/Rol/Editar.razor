@page "/rol/editar/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

@*<MudText Typo="Typo.h2" Class="ml">Editar Rol</MudText>
*@
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="rol" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <h1>Editar Rol</h1>
                    <MudCardContent>
                        <MudTextField Label="Nombre" @bind-Value="rol.Nombre" For="@(() => rol.Nombre)" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton id="edit" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" class="button">Guardar cambios</MudButton>
                        <MudButton id="regresar"  Link="@($"/rol/index/")" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Dark"  class="button">Atrás</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">No se pudo guardar.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }
    private bool showLeaveAlert = false;
    Rol rol = new Rol();

    protected override async Task OnInitializedAsync()
    {
        Http.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        var resp = await Http.GetStringAsync("rol/" + id);
        rol = JsonSerializer.Deserialize<Rol>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await saveChanges();
    }

    private async Task saveChanges()
    {

        var httpResponse = await Http.PutAsJsonAsync<Rol>("rol/" + rol.Id, rol);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            NavigationManager.NavigateTo("rol/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }
}

<style>
#edit{
        background-color:green;
        color:white;
    }
    #edit:hover{
    background-color:white;
        color:green;
        border:2px solid green; 
    }

    #regresar{
        background-color:orange;
        color:white;
        border:2px solid orange;
        height:38px;
    }
    #regresar:hover{
         background-color:white;
        color:orange;
    }
    .button{
        margin-inline:12px;
    }
</style>
