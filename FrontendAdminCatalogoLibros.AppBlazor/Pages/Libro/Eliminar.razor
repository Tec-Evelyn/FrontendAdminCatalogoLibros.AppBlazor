@page "/libro/eliminar/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

@*<MudText Typo="Typo.h2" Class="ml">Eliminar Libro</MudText>
*@
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="libro" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />

                <MudCard>
                    <h1>Eliminar Libro</h1>
                    <MudCardContent>

                        <MudTextField Label="Nombre" @bind-Value="libro.Nombre" For="@(() => libro.Nombre)" />
                        <MudTextField Label="Descripcion" @bind-Value="libro.Descripcion" For="@(() => libro.Descripcion)" />
                        <MudTextField Label="Imagen" @bind-Value="libro.Imagen" For="@(() => libro.Imagen)" />
                          @*Relacion con llaves foranea Categoria*@
                        <MudSelect Variant="Variant.Outlined" Label="Categoria" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="libro.IdCategoria" For="@(() => libro.IdCategoria)">
                            @foreach (var item in categorias)
                            {
                                <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                            }
                        </MudSelect>
                          @*Relacion con llaves foranea geneo*@
                          <MudSelect Variant="Variant.Outlined" Label="Genero" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="libro.IdGenero" For="@(() => libro.IdGenero)">
                            @foreach (var item in generos)
                            {
                                <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                            }
                        </MudSelect>
                         @*Relacion con llaves foranea geneo*@
                          <MudSelect Variant="Variant.Outlined" Label="Autor" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="libro.IdAutor" For="@(() => libro.IdAutor)">
                            @foreach (var item in autores)
                            {
                                <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                            }
                        </MudSelect>

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton id="delete" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" class="button">Eliminar</MudButton>
                        <MudButton id="regresar"  Link="@($"/libro/index/")" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Dark"  class="button">Atrás</MudButton>
                    </MudCardActions>
                </MudCard>

            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">Ocurrió un problema.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }

    private IEnumerable<Categoria> categorias = new List<Categoria>();
    private IEnumerable<Genero> generos = new List<Genero>();
    private IEnumerable<Autor> autores = new List<Autor>();
    private bool showLeaveAlert = false;
    Libro libro = new Libro();

    protected override async Task OnInitializedAsync()
    {
        Http.DefaultRequestHeaders.Authorization =
        new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getCategorias();

        Http.DefaultRequestHeaders.Authorization =
        new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getAutores();

        Http.DefaultRequestHeaders.Authorization =
        new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getGeneros();

        var resp = await Http.GetStringAsync("libro/" + id);
        libro = JsonSerializer.Deserialize<Libro>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await eliminar();
    }

    private async Task eliminar()
    {
        var httpResponse = await Http.DeleteAsync("libro/" + libro.Id);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            NavigationManager.NavigateTo("libro/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }

    private async Task getCategorias()
    {
        var httpResponse = await Http.GetStringAsync("categoria");
        categorias = JsonSerializer.Deserialize<IEnumerable<Categoria>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
     private async Task getAutores()
    {
        var httpResponse = await Http.GetStringAsync("autor");
        autores = JsonSerializer.Deserialize<IEnumerable<Autor>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
     private async Task getGeneros()
    {
        var httpResponse = await Http.GetStringAsync("genero");
        generos = JsonSerializer.Deserialize<IEnumerable<Genero>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}

<style>
#delete{
        background-color:red;
        color:white;
    }
    #delete:hover{
    background-color:white;
        color:red;
        border:2px solid red; 
    }

    #regresar{
        background-color:orange;
        color:white;
        border:2px solid orange;
        height:38px;
    }
    #regresar:hover{
         background-color:white;
        color:orange;
    }
    .button{
        margin-inline:12px;
    }
</style>